package web.data.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import web.data.dto.ProductDTO;

public class ProductDAO extends JdbcDAO{
	private static ProductDAO _dao;
	
	
	private ProductDAO() {
		// TODO Auto-generated constructor stub
	}
	
	static {
		_dao=new ProductDAO();
		
	}
	
	public static ProductDAO getDao(){
		return _dao;
	}
	
	//제품정보 등록
		public int insertProduct(ProductDTO product) {
			Connection con=null;
			PreparedStatement pstmt=null;
			int rows=0;
			
			try {
				con=getConnection();
				
				String sql="insert into product values(?,?,?,?,?,?,?)";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, product.getpId());
				pstmt.setString(2, product.getpName());
				pstmt.setString(3, product.getpImg());
				pstmt.setString(4, product.getpInfo());
				pstmt.setInt(5, product.getpPrice());
				pstmt.setInt(6, product.getpKinds());
				pstmt.setInt(7, product.getpStock());
				
				rows=pstmt.executeUpdate();
			} catch (SQLException e) {
				System.out.println("[에러]insertProduct()메소드의 SQL 오류"+e.getMessage());
			} finally {
				close(con, pstmt);
			} 
			return rows;
		}
		
		//제품 ID로 해당 제품정보 검색
		public ProductDTO selectIdProduct(String pId) {
			Connection con=null;
			PreparedStatement pstmt=null;
			ResultSet rs=null;
			ProductDTO product=null;
			try {
				con=getConnection();
				String sql="select * from product where id=? and p_kinds != -1";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, pId);
				rs=pstmt.executeQuery();
				
				if(rs.next()) {
					product=new ProductDTO();
					product.setpId(rs.getString("p_id"));
					product.setpName(rs.getString("p_name"));
					product.setpImg(rs.getString("p_img"));
					product.setpInfo(rs.getString("p_info"));
					product.setpPrice(rs.getInt("p_price"));
					product.setpKinds(rs.getInt("p_kinds"));
					product.setpStock(rs.getInt("p_stock"));
				}
				
			} catch (SQLException e) {
				System.out.println("[에러]selectIdProduct()메소드의 SQL 오류"+e.getMessage());
			} finally {
				close(con, pstmt, rs);
			}
			return product;
		}
		
		//카테고리별 제품군 검색
		public List<ProductDTO> selectKindsProduct(int pKinds) {
			Connection con=null;
			PreparedStatement pstmt=null;
			ResultSet rs=null;
			List<ProductDTO> productList=new ArrayList<ProductDTO>();
			try {
				con=getConnection();
				
				if(pKinds==0) {
					String sql="select * from product order by p_id";
					
					pstmt=con.prepareStatement(sql);
				} else if(pKinds>=1 && pKinds<=6) {
					String sql="select * from product where p_kinds=?";
					pstmt=con.prepareStatement(sql);
					pstmt.setInt(1, pKinds);
				} 
				
				rs=pstmt.executeQuery();
			} catch (SQLException e) {
				System.out.println("[에러]selectKindsProduct()메소드의 SQL 오류"+e.getMessage());
			} finally {
				close(con, pstmt, rs);
			}
			return productList;
		}
		
		
		
		//제품 ID에 해당하는 제품정보 변경
		public int updateProduct(ProductDTO product) {
			Connection con=null;
			PreparedStatement pstmt=null;
			int rows=0;
			
			try {
				con=getConnection();
				String sql="update product set p_name=?,p_img=?,p_info=?,p_price=?,p_kinds=?,p_stock=? where p_id=?";
				
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1,product.getpName());
				pstmt.setString(2,product.getpImg());
				pstmt.setString(3,product.getpInfo());
				pstmt.setInt(4,product.getpPrice());
				pstmt.setInt(5,product.getpKinds());
				pstmt.setInt(6,product.getpStock());
				pstmt.setString(7,product.getpId());
				
				rows=pstmt.executeUpdate();
			} catch (SQLException e) {
				System.out.println("[에러]updateProduct()메소드의 SQL 오류"+e.getMessage());
			} finally {
				close(con, pstmt);
			}
			return rows;
		}
		
		//ID에 해당하는 제품정보 삭제
		public int deleteProduct(String pId) {
			Connection con=null;
			PreparedStatement pstmt=null;
			int rows=0;
			try {
				con=getConnection();
				
				String sql="delete from product where id=?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, pId);
				
				rows=pstmt.executeUpdate();
			} catch (SQLException e) {
				System.out.println("[에러]deleteProduct()메소드의 SQL 오류"+e.getMessage());
			} finally {
				close(con, pstmt);
			}
			return rows;
		}
}




